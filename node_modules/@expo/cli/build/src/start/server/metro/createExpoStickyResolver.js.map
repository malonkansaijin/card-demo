{"version":3,"sources":["../../../../../src/start/server/metro/createExpoStickyResolver.ts"],"sourcesContent":["import type { ResolutionContext } from '@expo/metro/metro-resolver';\nimport type { SearchOptions as AutolinkingSearchOptions } from 'expo-modules-autolinking/exports';\n\nimport type { StrictResolverFactory } from './withMetroMultiPlatform';\nimport type { ExpoCustomMetroResolver } from './withMetroResolvers';\n\nconst debug = require('debug')('expo:start:server:metro:sticky-resolver') as typeof console.log;\n\nconst AUTOLINKING_PLATFORMS = ['android', 'ios', 'web'] as const;\ntype AutolinkingPlatform = (typeof AUTOLINKING_PLATFORMS)[number];\n\nconst escapeDependencyName = (dependency: string) =>\n  dependency.replace(/[*.?()[\\]]/g, (x) => `\\\\${x}`);\n\n/** Converts a list of module names to a regex that may either match bare module names or sub-modules of modules */\nexport const _dependenciesToRegex = (dependencies: string[]) =>\n  new RegExp(`^(${dependencies.map(escapeDependencyName).join('|')})($|/.*)`);\n\n/** Creates a function to load a dependency of the `expo` package */\nconst createExpoDependencyLoader = <T>(request: string) => {\n  let mod: T | undefined;\n  return (): T => {\n    if (!mod) {\n      const expoPath = require.resolve('expo/package.json');\n      const autolinkingPath = require.resolve(request, {\n        paths: [expoPath],\n      });\n      return (mod = require(autolinkingPath));\n    }\n    return mod;\n  };\n};\n\nconst getAutolinkingModule = createExpoDependencyLoader<\n  typeof import('expo-modules-autolinking/exports')\n>('expo-modules-autolinking/exports');\n\nconst getReactNativeConfigModule = createExpoDependencyLoader<\n  typeof import('expo-modules-autolinking/build/reactNativeConfig')\n>('expo-modules-autolinking/build/reactNativeConfig');\n\nconst getAutolinkingOptions = async (\n  projectRoot: string,\n  platform: AutolinkingPlatform\n): Promise<AutolinkingSearchOptions> => {\n  const autolinking = getAutolinkingModule();\n  return await autolinking.mergeLinkingOptionsAsync({\n    searchPaths: [],\n    projectRoot,\n    platform: platform === 'ios' ? 'apple' : platform,\n    onlyProjectDeps: true,\n    silent: true,\n  });\n};\n\nconst getAutolinkingResolutions = async (\n  opts: AutolinkingSearchOptions\n): Promise<Record<string, string>> => {\n  const autolinking = getAutolinkingModule();\n  const resolvedModules = await autolinking.findModulesAsync(opts);\n  return Object.fromEntries(\n    Object.entries(resolvedModules).map(([key, entry]) => [key, entry.path])\n  );\n};\n\nconst getReactNativeConfigResolutions = async (\n  opts: AutolinkingSearchOptions\n): Promise<Record<string, string>> => {\n  const reactNativeConfigModule = getReactNativeConfigModule();\n  const configResult = await reactNativeConfigModule.createReactNativeConfigAsync({\n    ...opts,\n    // NOTE(@kitten): web will use ios here. This is desired since this function only accepts android|ios.\n    // However, we'd still like to sticky resolve dependencies for web\n    platform: opts.platform === 'android' ? 'android' : 'ios',\n    // TODO(@kitten): Unclear if this should be populated or directly relates to sticky resolution\n    transitiveLinkingDependencies: [],\n  });\n  return Object.fromEntries(\n    Object.entries(configResult.dependencies).map(([key, entry]) => [key, entry.root])\n  );\n};\n\ninterface PlatformModuleDescription {\n  platform: AutolinkingPlatform;\n  moduleTestRe: RegExp;\n  resolvedModulePaths: Record<string, string>;\n}\n\nconst getPlatformModuleDescription = async (\n  projectRoot: string,\n  platform: AutolinkingPlatform\n): Promise<PlatformModuleDescription> => {\n  const searchOptions = await getAutolinkingOptions(projectRoot, platform);\n  const autolinkingResolutions$ = getAutolinkingResolutions(searchOptions);\n  const reactNativeConfigResolutions$ = getReactNativeConfigResolutions(searchOptions);\n  const resolvedModulePaths = {\n    ...(await reactNativeConfigResolutions$),\n    ...(await autolinkingResolutions$),\n  };\n  const resolvedModuleNames = Object.keys(resolvedModulePaths);\n  debug(\n    `Sticky resolution for ${platform} registered ${resolvedModuleNames.length} resolutions:`,\n    resolvedModuleNames\n  );\n  return {\n    platform,\n    moduleTestRe: _dependenciesToRegex(resolvedModuleNames),\n    resolvedModulePaths,\n  };\n};\n\nexport type StickyModuleResolverInput = {\n  [platform in AutolinkingPlatform]?: PlatformModuleDescription;\n};\n\nexport async function createStickyModuleResolverInput({\n  platforms,\n  projectRoot,\n}: {\n  projectRoot: string;\n  platforms: string[];\n}): Promise<StickyModuleResolverInput> {\n  return Object.fromEntries(\n    await Promise.all(\n      platforms\n        .filter((platform): platform is AutolinkingPlatform =>\n          AUTOLINKING_PLATFORMS.includes(platform as any)\n        )\n        .map(async (platform) => {\n          const platformModuleDescription = await getPlatformModuleDescription(\n            projectRoot,\n            platform\n          );\n          return [platformModuleDescription.platform, platformModuleDescription] as const;\n        })\n    )\n  ) as StickyModuleResolverInput;\n}\n\nexport function createStickyModuleResolver(\n  input: StickyModuleResolverInput | undefined,\n  { getStrictResolver }: { getStrictResolver: StrictResolverFactory }\n): ExpoCustomMetroResolver | undefined {\n  if (!input) {\n    return undefined;\n  }\n\n  const fileSpecifierRe = /^[\\\\/]|^\\.\\.?(?:$|[\\\\/])/i;\n  const isAutolinkingPlatform = (platform: string | null): platform is AutolinkingPlatform =>\n    !!platform && (input as any)[platform] != null;\n\n  return function requestStickyModule(immutableContext, moduleName, platform) {\n    if (!isAutolinkingPlatform(platform)) {\n      return null;\n    } else if (fileSpecifierRe.test(moduleName)) {\n      return null;\n    }\n\n    const moduleDescription = input[platform]!;\n    const moduleMatch = moduleDescription.moduleTestRe.exec(moduleName);\n    if (moduleMatch) {\n      const resolvedModulePath =\n        moduleDescription.resolvedModulePaths[moduleMatch[1]] || moduleName;\n      // We instead resolve as if it was a dependency from within the module (self-require/import)\n      const context: ResolutionContext = {\n        ...immutableContext,\n        nodeModulesPaths: [resolvedModulePath],\n        originModulePath: resolvedModulePath,\n      };\n      const res = getStrictResolver(context, platform)(moduleName);\n      debug(`Sticky resolution for ${platform}: ${moduleName} -> ${resolvedModulePath}`);\n      return res;\n    }\n\n    return null;\n  };\n}\n"],"names":["_dependenciesToRegex","createStickyModuleResolver","createStickyModuleResolverInput","debug","require","AUTOLINKING_PLATFORMS","escapeDependencyName","dependency","replace","x","dependencies","RegExp","map","join","createExpoDependencyLoader","request","mod","expoPath","resolve","autolinkingPath","paths","getAutolinkingModule","getReactNativeConfigModule","getAutolinkingOptions","projectRoot","platform","autolinking","mergeLinkingOptionsAsync","searchPaths","onlyProjectDeps","silent","getAutolinkingResolutions","opts","resolvedModules","findModulesAsync","Object","fromEntries","entries","key","entry","path","getReactNativeConfigResolutions","reactNativeConfigModule","configResult","createReactNativeConfigAsync","transitiveLinkingDependencies","root","getPlatformModuleDescription","searchOptions","autolinkingResolutions$","reactNativeConfigResolutions$","resolvedModulePaths","resolvedModuleNames","keys","length","moduleTestRe","platforms","Promise","all","filter","includes","platformModuleDescription","input","getStrictResolver","undefined","fileSpecifierRe","isAutolinkingPlatform","requestStickyModule","immutableContext","moduleName","test","moduleDescription","moduleMatch","exec","resolvedModulePath","context","nodeModulesPaths","originModulePath","res"],"mappings":"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"}