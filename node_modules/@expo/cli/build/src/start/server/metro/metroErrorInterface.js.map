{"version":3,"sources":["../../../../../src/start/server/metro/metroErrorInterface.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getMetroServerRoot } from '@expo/config/paths';\nimport chalk from 'chalk';\nimport { stripVTControlCharacters } from 'node:util';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\nimport { parse, StackFrame } from 'stacktrace-parser';\nimport terminalLink from 'terminal-link';\n\nimport { LogBoxLog } from './log-box/LogBoxLog';\nimport type { CodeFrame, StackFrame as MetroStackFrame } from './log-box/LogBoxSymbolication';\nimport { getStackFormattedLocation } from './log-box/formatProjectFilePath';\nimport { Log } from '../../../log';\nimport { stripAnsi } from '../../../utils/ansi';\nimport { env } from '../../../utils/env';\nimport { CommandError, SilentError } from '../../../utils/errors';\nimport { createMetroEndpointAsync } from '../getStaticRenderFunctions';\n\nconst isDebug = require('debug').enabled('expo:start:server:metro');\n\nfunction fill(width: number): string {\n  return Array(width).join(' ');\n}\n\nfunction formatPaths(config: { filePath: string | null; line?: number; col?: number }) {\n  const filePath = chalk.reset(config.filePath);\n  return (\n    chalk.dim('(') +\n    filePath +\n    chalk.dim(`:${[config.line, config.col].filter(Boolean).join(':')})`)\n  );\n}\n\nexport async function logMetroErrorWithStack(\n  projectRoot: string,\n  {\n    stack,\n    codeFrame,\n    error,\n  }: {\n    stack: MetroStackFrame[];\n    codeFrame?: CodeFrame;\n    error: Error;\n  }\n) {\n  if (error instanceof SilentError) {\n    return;\n  }\n\n  // process.stdout.write('\\u001b[0m'); // Reset attributes\n  // process.stdout.write('\\u001bc'); // Reset the terminal\n\n  Log.log();\n  Log.log(chalk.red('Metro error: ') + error.message);\n  Log.log();\n\n  if (error instanceof CommandError) {\n    return;\n  }\n\n  Log.log(\n    getStackAsFormattedLog(projectRoot, { stack, codeFrame, error, showCollapsedFrames: true })\n  );\n}\n\nexport function getStackAsFormattedLog(\n  projectRoot: string,\n  {\n    stack,\n    codeFrame,\n    error,\n    showCollapsedFrames = env.EXPO_DEBUG,\n  }: {\n    stack: MetroStackFrame[];\n    codeFrame?: CodeFrame;\n    error?: Error;\n    showCollapsedFrames?: boolean;\n  }\n): string {\n  const logs: string[] = [];\n  let hasCodeFramePresented = false;\n  const containsCodeFrame = likelyContainsCodeFrame(error?.message);\n\n  if (containsCodeFrame) {\n    // Some transformation errors will have a code frame embedded in the error message\n    // from Babel and we should not duplicate it as message is already printed before this call.\n    hasCodeFramePresented = true;\n  } else if (codeFrame) {\n    const maxWarningLineLength = Math.max(800, process.stdout.columns);\n\n    const lineText = codeFrame.content;\n    const isPreviewTooLong = codeFrame.content\n      .split('\\n')\n      .some((line) => line.length > maxWarningLineLength);\n    const column = codeFrame.location?.column;\n    // When the preview is too long, we skip reading the file and attempting to apply\n    // code coloring, this is because it can get very slow.\n    if (isPreviewTooLong) {\n      let previewLine = '';\n      let cursorLine = '';\n\n      const formattedPath = formatPaths({\n        filePath: codeFrame.fileName,\n        line: codeFrame.location?.row,\n        col: codeFrame.location?.column,\n      });\n      // Create a curtailed preview line like:\n      // `...transition:'fade'},k._updatePropsStack=function(){clearImmediate(k._updateImmediate),k._updateImmediate...`\n      // If there is no text preview or column number, we can't do anything.\n      if (lineText && column != null) {\n        const rangeWindow = Math.round(\n          Math.max(codeFrame.fileName?.length ?? 0, Math.max(80, process.stdout.columns)) / 2\n        );\n        let minBounds = Math.max(0, column - rangeWindow);\n        const maxBounds = Math.min(minBounds + rangeWindow * 2, lineText.length);\n        previewLine = lineText.slice(minBounds, maxBounds);\n\n        // If we splice content off the start, then we should append `...`.\n        // This is unlikely to happen since we limit the activation size.\n        if (minBounds > 0) {\n          // Adjust the min bounds so the cursor is aligned after we add the \"...\"\n          minBounds -= 3;\n          previewLine = chalk.dim('...') + previewLine;\n        }\n        if (maxBounds < lineText.length) {\n          previewLine += chalk.dim('...');\n        }\n\n        // If the column property could be found, then use that to fix the cursor location which is often broken in regex.\n        cursorLine = (column == null ? '' : fill(column) + chalk.reset('^')).slice(minBounds);\n\n        logs.push(formattedPath, '', previewLine, cursorLine, chalk.dim('(error truncated)'));\n        hasCodeFramePresented = true;\n      }\n    } else {\n      logs.push(codeFrame.content);\n      hasCodeFramePresented = true;\n    }\n  }\n\n  if (stack?.length) {\n    const stackProps = stack.map((frame) => {\n      return {\n        title: frame.methodName,\n        subtitle: getStackFormattedLocation(projectRoot, frame),\n        collapse: frame.collapse,\n      };\n    });\n\n    const stackLines: string[] = [];\n    const backupStackLines: string[] = [];\n\n    stackProps.forEach((frame) => {\n      const shouldShow = !frame.collapse || showCollapsedFrames;\n\n      const position = terminalLink.isSupported\n        ? terminalLink(frame.subtitle, frame.subtitle)\n        : frame.subtitle;\n      let lineItem = chalk.gray(`  ${frame.title} (${position})`);\n\n      if (frame.collapse) {\n        lineItem = chalk.dim(lineItem);\n      }\n      // Never show the internal module system.\n      const isMetroRuntime =\n        /\\/metro-runtime\\/src\\/polyfills\\/require\\.js/.test(frame.subtitle) ||\n        /\\/metro-require\\/require\\.js/.test(frame.subtitle);\n      if (!isMetroRuntime) {\n        if (shouldShow) {\n          stackLines.push(lineItem);\n        }\n        backupStackLines.push(lineItem);\n      }\n    });\n\n    if (hasCodeFramePresented) {\n      logs.push('');\n    }\n    logs.push(chalk.bold`Call Stack`);\n\n    if (!backupStackLines.length) {\n      logs.push(chalk.gray('  No stack trace available.'));\n    } else {\n      // If there are not stack lines then it means the error likely happened in the node modules, in this case we should fallback to showing all the\n      // the stacks to give the user whatever help we can.\n      const displayStack = stackLines.length ? stackLines : backupStackLines;\n      logs.push(displayStack.join('\\n'));\n    }\n  } else if (error && error.stack) {\n    logs.push(chalk.gray(`  ${error.stack}`));\n  }\n  return logs.join('\\n');\n}\n\nexport const IS_METRO_BUNDLE_ERROR_SYMBOL = Symbol('_isMetroBundleError');\nconst HAS_LOGGED_SYMBOL = Symbol('_hasLoggedInCLI');\n\nexport async function logMetroError(\n  projectRoot: string,\n  {\n    error,\n  }: {\n    error: Error & {\n      [HAS_LOGGED_SYMBOL]?: boolean;\n    };\n  }\n) {\n  if (error instanceof SilentError || error[HAS_LOGGED_SYMBOL]) {\n    return;\n  }\n  error[HAS_LOGGED_SYMBOL] = true;\n\n  const stack = parseErrorStack(projectRoot, error.stack);\n\n  const log = new LogBoxLog({\n    level: 'static',\n    message: {\n      content: error.message,\n      substitutions: [],\n    },\n    isComponentError: false,\n    stack,\n    category: 'static',\n    componentStack: [],\n  });\n\n  await new Promise((res) => log.symbolicate('stack', res));\n\n  logMetroErrorWithStack(projectRoot, {\n    stack: log.symbolicated?.stack?.stack ?? [],\n    codeFrame: log.codeFrame,\n    error,\n  });\n}\n\nfunction isTransformError(\n  error: any\n): error is { type: 'TransformError'; filename: string; lineNumber: number; column: number } {\n  return error.type === 'TransformError';\n}\n\n/** @returns the html required to render the static metro error as an SPA. */\nfunction logFromError({ error, projectRoot }: { error: Error; projectRoot: string }) {\n  // Remap direct Metro Node.js errors to a format that will appear more client-friendly in the logbox UI.\n  let stack: MetroStackFrame[] | undefined;\n  if (isTransformError(error) && error.filename) {\n    // Syntax errors in static rendering.\n    stack = [\n      {\n        file: path.join(projectRoot, error.filename),\n        methodName: '<unknown>',\n        arguments: [],\n        // TODO: Import stack\n        lineNumber: error.lineNumber,\n        column: error.column,\n      },\n    ];\n  } else if ('originModulePath' in error && typeof error.originModulePath === 'string') {\n    // TODO: Use import stack here when the error is resolution based.\n    stack = [\n      {\n        file: error.originModulePath,\n        methodName: '<unknown>',\n        arguments: [],\n        // TODO: Import stack\n        lineNumber: 0,\n        column: 0,\n      },\n    ];\n  } else {\n    stack = parseErrorStack(projectRoot, error.stack);\n  }\n\n  return new LogBoxLog({\n    level: 'static',\n    message: {\n      content: error.message,\n      substitutions: [],\n    },\n    isComponentError: false,\n    stack,\n    category: 'static',\n    componentStack: [],\n  });\n}\n\n/** @returns the html required to render the static metro error as an SPA. */\nexport async function logMetroErrorAsync({\n  error,\n  projectRoot,\n}: {\n  error: Error;\n  projectRoot: string;\n}) {\n  const log = logFromError({ projectRoot, error });\n\n  await new Promise<void>((res) => log.symbolicate('stack', () => res()));\n\n  logMetroErrorWithStack(projectRoot, {\n    stack: log.symbolicated?.stack?.stack ?? [],\n    codeFrame: log.codeFrame,\n    error,\n  });\n}\n\n/** @returns the html required to render the static metro error as an SPA. */\nexport async function getErrorOverlayHtmlAsync({\n  error,\n  projectRoot,\n  routerRoot,\n}: {\n  error: Error;\n  projectRoot: string;\n  routerRoot: string;\n}) {\n  const log = logFromError({ projectRoot, error });\n\n  await new Promise<void>((res) => log.symbolicate('stack', () => res()));\n\n  logMetroErrorWithStack(projectRoot, {\n    stack: log.symbolicated?.stack?.stack ?? [],\n    codeFrame: log.codeFrame,\n    error,\n  });\n\n  if ('message' in log && 'content' in log.message && typeof log.message.content === 'string') {\n    log.message.content = stripAnsi(log.message.content)!;\n  }\n\n  const logBoxContext = {\n    selectedLogIndex: 0,\n    isDisabled: false,\n    logs: [log],\n  };\n  const html = `<html><head><style>#root,body,html{height:100%}body{overflow:hidden}#root{display:flex}</style></head><body><div id=\"root\"></div><script id=\"_expo-static-error\" type=\"application/json\">${JSON.stringify(\n    logBoxContext\n  )}</script></body></html>`;\n\n  const errorOverlayEntry = await createMetroEndpointAsync(\n    projectRoot,\n    // Keep the URL relative\n    '',\n    resolveFrom(projectRoot, 'expo-router/_error'),\n    {\n      mode: 'development',\n      platform: 'web',\n      minify: false,\n      optimize: false,\n      usedExports: false,\n      baseUrl: '',\n      routerRoot,\n      isExporting: false,\n      reactCompiler: false,\n    }\n  );\n\n  const htmlWithJs = html.replace('</body>', `<script src=${errorOverlayEntry}></script></body>`);\n  return htmlWithJs;\n}\n\nfunction parseErrorStack(\n  projectRoot: string,\n  stack?: string\n): (StackFrame & { collapse?: boolean })[] {\n  if (stack == null) {\n    return [];\n  }\n  if (Array.isArray(stack)) {\n    return stack;\n  }\n\n  const serverRoot = getMetroServerRoot(projectRoot);\n\n  return parse(stack)\n    .map((frame) => {\n      // frame.file will mostly look like `http://localhost:8081/index.bundle?platform=web&dev=true&hot=false`\n\n      if (frame.file) {\n        // SSR will sometimes have absolute paths followed by `.bundle?...`, we need to try and make them relative paths and append a dev server URL.\n        if (frame.file.startsWith('/') && frame.file.includes('bundle?') && !canParse(frame.file)) {\n          // Malformed stack file from SSR. Attempt to repair.\n          frame.file = 'https://localhost:8081/' + path.relative(serverRoot, frame.file);\n        }\n      }\n\n      return {\n        ...frame,\n        column: frame.column != null ? frame.column - 1 : null,\n      };\n    })\n    .filter((frame) => frame.file && !frame.file.includes('node_modules'));\n}\n\nfunction canParse(url: string): boolean {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function dropStackIfContainsCodeFrame(err: unknown) {\n  if (!(err instanceof Error)) return;\n\n  if (likelyContainsCodeFrame(err.message)) {\n    // If the error message contains a code frame, we should drop the stack to avoid cluttering the output.\n    delete err.stack;\n  }\n}\n\n/**\n * Tests given string on presence of ` [num] |` at the start of any line.\n * Returns `false` for undefined or empty strings.\n */\nexport function likelyContainsCodeFrame(message: string | undefined): boolean {\n  if (!message) return false;\n\n  const clean = stripVTControlCharacters(message);\n  if (!clean) return false;\n\n  return /^\\s*\\d+\\s+\\|/m.test(clean);\n}\n\n/**\n * Walks thru the error cause chain and attaches the import stack to the root error message.\n * Removes the error stack for import and syntax errors.\n */\nexport const attachImportStackToRootMessage = (err: unknown) => {\n  if (!(err instanceof Error)) return;\n\n  // Space out build failures.\n  const nearestImportStackValue = nearestImportStack(err);\n  if (nearestImportStackValue) {\n    err.message += '\\n\\n' + nearestImportStackValue;\n\n    if (!isDebug) {\n      // When not debugging remove the stack to avoid cluttering the output and confusing users,\n      // the import stack is the guide to fixing the error.\n      delete err.stack;\n    }\n  }\n};\n\n/**\n * Walks thru the error cause chain and returns the nearest import stack.\n * If the import stack is not found, it returns `undefined`.\n */\nexport const nearestImportStack = (err: unknown, root: unknown = err): string | undefined => {\n  if (!(err instanceof Error) || !(root instanceof Error)) return undefined;\n\n  if ('_expoImportStack' in err && typeof err._expoImportStack === 'string') {\n    // Space out build failures.\n    return err._expoImportStack;\n  } else {\n    return nearestImportStack(err.cause, root);\n  }\n};\n"],"names":["IS_METRO_BUNDLE_ERROR_SYMBOL","attachImportStackToRootMessage","dropStackIfContainsCodeFrame","getErrorOverlayHtmlAsync","getStackAsFormattedLog","likelyContainsCodeFrame","logMetroError","logMetroErrorAsync","logMetroErrorWithStack","nearestImportStack","isDebug","require","enabled","fill","width","Array","join","formatPaths","config","filePath","chalk","reset","dim","line","col","filter","Boolean","projectRoot","stack","codeFrame","error","SilentError","Log","log","red","message","CommandError","showCollapsedFrames","env","EXPO_DEBUG","logs","hasCodeFramePresented","containsCodeFrame","maxWarningLineLength","Math","max","process","stdout","columns","lineText","content","isPreviewTooLong","split","some","length","column","location","previewLine","cursorLine","formattedPath","fileName","row","rangeWindow","round","minBounds","maxBounds","min","slice","push","stackProps","map","frame","title","methodName","subtitle","getStackFormattedLocation","collapse","stackLines","backupStackLines","forEach","shouldShow","position","terminalLink","isSupported","lineItem","gray","isMetroRuntime","test","bold","displayStack","Symbol","HAS_LOGGED_SYMBOL","parseErrorStack","LogBoxLog","level","substitutions","isComponentError","category","componentStack","Promise","res","symbolicate","symbolicated","isTransformError","type","logFromError","filename","file","path","arguments","lineNumber","originModulePath","routerRoot","stripAnsi","logBoxContext","selectedLogIndex","isDisabled","html","JSON","stringify","errorOverlayEntry","createMetroEndpointAsync","resolveFrom","mode","platform","minify","optimize","usedExports","baseUrl","isExporting","reactCompiler","htmlWithJs","replace","isArray","serverRoot","getMetroServerRoot","parse","startsWith","includes","canParse","relative","url","URL","err","Error","clean","stripVTControlCharacters","nearestImportStackValue","root","undefined","_expoImportStack","cause"],"mappings":"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"}