{"version":3,"sources":["../../../../../src/start/server/middleware/metroOptions.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport type { BundleOptions as MetroBundleOptions } from '@expo/metro/metro/shared/types.flow';\n\nimport { env } from '../../../utils/env';\nimport { CommandError } from '../../../utils/errors';\nimport { toPosixPath } from '../../../utils/filePath';\nimport { getRouterDirectoryModuleIdWithManifest } from '../metro/router';\n\nconst debug = require('debug')('expo:metro:options') as typeof console.log;\n\nexport type MetroEnvironment = 'node' | 'react-server' | 'client';\n\nexport type ExpoMetroOptions = {\n  platform: string;\n  mainModuleName: string;\n  mode: string;\n  minify?: boolean;\n  environment?: MetroEnvironment;\n  serializerOutput?: 'static';\n  serializerIncludeMaps?: boolean;\n  lazy?: boolean;\n  engine?: 'hermes';\n  preserveEnvVars?: boolean;\n  bytecode: boolean;\n  /** Enable async routes (route-based bundle splitting) in Expo Router. */\n  asyncRoutes?: boolean;\n  /** Module ID relative to the projectRoot for the Expo Router app directory. */\n  routerRoot: string;\n  /** Enable React compiler support in Babel. */\n  reactCompiler: boolean;\n  baseUrl?: string;\n  isExporting: boolean;\n  /** Is bundling a DOM Component (\"use dom\"). Requires the entry dom component file path. */\n  domRoot?: string;\n  /** Exporting MD5 filename based on file contents, for EAS Update.  */\n  useMd5Filename?: boolean;\n  inlineSourceMap?: boolean;\n  clientBoundaries?: string[];\n  splitChunks?: boolean;\n  usedExports?: boolean;\n  /** Enable optimized bundling (required for tree shaking). */\n  optimize?: boolean;\n\n  modulesOnly?: boolean;\n  runModule?: boolean;\n  /** Disable live bindings (enabled by default, required for circular deps) in experimental import export support. */\n  liveBindings?: boolean;\n};\n\n// See: @expo/metro-config/src/serializer/fork/baseJSBundle.ts `ExpoSerializerOptions`\nexport type SerializerOptions = {\n  includeSourceMaps?: boolean;\n  output?: 'static';\n  splitChunks?: boolean;\n  usedExports?: boolean;\n  exporting?: boolean;\n};\n\nexport type ExpoMetroBundleOptions = MetroBundleOptions & {\n  serializerOptions?: SerializerOptions;\n};\n\nexport function isServerEnvironment(environment?: any): boolean {\n  return environment === 'node' || environment === 'react-server';\n}\n\nfunction withDefaults({\n  mode = 'development',\n  minify = mode === 'production',\n  preserveEnvVars = mode !== 'development' && env.EXPO_NO_CLIENT_ENV_VARS,\n  lazy,\n  environment,\n  ...props\n}: ExpoMetroOptions): ExpoMetroOptions {\n  if (props.bytecode) {\n    if (props.platform === 'web') {\n      throw new CommandError('Cannot use bytecode with the web platform');\n    }\n    if (props.engine !== 'hermes') {\n      throw new CommandError('Bytecode is only supported with the Hermes engine');\n    }\n  }\n\n  const optimize =\n    props.optimize ??\n    (environment !== 'node' && mode === 'production' && env.EXPO_UNSTABLE_METRO_OPTIMIZE_GRAPH);\n\n  return {\n    mode,\n    minify,\n    preserveEnvVars,\n    optimize,\n    usedExports: optimize && env.EXPO_UNSTABLE_TREE_SHAKING,\n    lazy: !props.isExporting && lazy,\n    environment: environment === 'client' ? undefined : environment,\n    liveBindings: env.EXPO_UNSTABLE_LIVE_BINDINGS,\n    ...props,\n  };\n}\n\nexport function getBaseUrlFromExpoConfig(exp: ExpoConfig) {\n  return exp.experiments?.baseUrl?.trim().replace(/\\/+$/, '') ?? '';\n}\n\nexport function getAsyncRoutesFromExpoConfig(exp: ExpoConfig, mode: string, platform: string) {\n  let asyncRoutesSetting;\n\n  if (exp.extra?.router?.asyncRoutes) {\n    const asyncRoutes = exp.extra?.router?.asyncRoutes;\n    if (['boolean', 'string'].includes(typeof asyncRoutes)) {\n      asyncRoutesSetting = asyncRoutes;\n    } else if (typeof asyncRoutes === 'object') {\n      asyncRoutesSetting = asyncRoutes[platform] ?? asyncRoutes.default;\n    }\n  }\n\n  return [mode, true].includes(asyncRoutesSetting);\n}\n\nexport function getMetroDirectBundleOptionsForExpoConfig(\n  projectRoot: string,\n  exp: ExpoConfig,\n  options: Omit<ExpoMetroOptions, 'baseUrl' | 'reactCompiler' | 'routerRoot' | 'asyncRoutes'>\n): Partial<ExpoMetroBundleOptions> {\n  return getMetroDirectBundleOptions({\n    ...options,\n    reactCompiler: !!exp.experiments?.reactCompiler,\n    baseUrl: getBaseUrlFromExpoConfig(exp),\n    routerRoot: getRouterDirectoryModuleIdWithManifest(projectRoot, exp),\n    asyncRoutes: getAsyncRoutesFromExpoConfig(exp, options.mode, options.platform),\n  });\n}\n\nexport function getMetroDirectBundleOptions(\n  options: ExpoMetroOptions\n): Partial<ExpoMetroBundleOptions> {\n  const {\n    mainModuleName,\n    platform,\n    mode,\n    minify,\n    environment,\n    serializerOutput,\n    serializerIncludeMaps,\n    bytecode,\n    lazy,\n    engine,\n    preserveEnvVars,\n    asyncRoutes,\n    baseUrl,\n    routerRoot,\n    isExporting,\n    inlineSourceMap,\n    splitChunks,\n    usedExports,\n    reactCompiler,\n    optimize,\n    domRoot,\n    clientBoundaries,\n    runModule,\n    modulesOnly,\n    useMd5Filename,\n    liveBindings,\n  } = withDefaults(options);\n\n  const dev = mode !== 'production';\n  const isHermes = engine === 'hermes';\n\n  if (isExporting) {\n    debug('Disabling lazy bundling for export build');\n    options.lazy = false;\n  }\n\n  let fakeSourceUrl: string | undefined;\n  let fakeSourceMapUrl: string | undefined;\n\n  // TODO: Upstream support to Metro for passing custom serializer options.\n  if (serializerIncludeMaps != null || serializerOutput != null) {\n    fakeSourceUrl = new URL(\n      createBundleUrlPath(options).replace(/^\\//, ''),\n      'http://localhost:8081'\n    ).toString();\n    if (serializerIncludeMaps) {\n      fakeSourceMapUrl = fakeSourceUrl.replace('.bundle?', '.map?');\n    }\n  }\n\n  const customTransformOptions: ExpoMetroBundleOptions['customTransformOptions'] = {\n    __proto__: null,\n    optimize: optimize || undefined,\n    engine,\n    clientBoundaries,\n    preserveEnvVars: preserveEnvVars || undefined,\n    // Use string to match the query param behavior.\n    asyncRoutes: asyncRoutes ? String(asyncRoutes) : undefined,\n    environment,\n    baseUrl: baseUrl || undefined,\n    routerRoot,\n    bytecode: bytecode ? '1' : undefined,\n    reactCompiler: reactCompiler ? String(reactCompiler) : undefined,\n    dom: domRoot,\n    useMd5Filename: useMd5Filename || undefined,\n    liveBindings: !liveBindings ? String(liveBindings) : undefined,\n  };\n\n  // Iterate and delete undefined values\n  for (const key in customTransformOptions) {\n    if (customTransformOptions[key] === undefined) {\n      delete customTransformOptions[key];\n    }\n  }\n\n  const bundleOptions: Partial<ExpoMetroBundleOptions> = {\n    platform,\n    entryFile: mainModuleName,\n    dev,\n    minify: minify ?? !dev,\n    inlineSourceMap: inlineSourceMap ?? false,\n    lazy: (!isExporting && lazy) || undefined,\n    unstable_transformProfile: isHermes ? 'hermes-stable' : 'default',\n    customTransformOptions,\n    runModule,\n    modulesOnly,\n    customResolverOptions: {\n      __proto__: null,\n      environment,\n      exporting: isExporting || undefined,\n    },\n    sourceMapUrl: fakeSourceMapUrl,\n    sourceUrl: fakeSourceUrl,\n    serializerOptions: {\n      splitChunks,\n      usedExports: usedExports || undefined,\n      output: serializerOutput,\n      includeSourceMaps: serializerIncludeMaps,\n      exporting: isExporting || undefined,\n    },\n  };\n\n  return bundleOptions;\n}\n\nexport function createBundleUrlPathFromExpoConfig(\n  projectRoot: string,\n  exp: ExpoConfig,\n  options: Omit<ExpoMetroOptions, 'reactCompiler' | 'baseUrl' | 'routerRoot'>\n): string {\n  return createBundleUrlPath({\n    ...options,\n    reactCompiler: !!exp.experiments?.reactCompiler,\n    baseUrl: getBaseUrlFromExpoConfig(exp),\n    routerRoot: getRouterDirectoryModuleIdWithManifest(projectRoot, exp),\n  });\n}\n\nexport function createBundleUrlPath(options: ExpoMetroOptions): string {\n  const queryParams = createBundleUrlSearchParams(options);\n  return `/${encodeURI(options.mainModuleName.replace(/^\\/+/, ''))}.bundle?${queryParams.toString()}`;\n}\n\n/**\n * Create a bundle URL, containing all required query parameters, using a valid \"os path\".\n * On POSIX systems, this would look something like `/Users/../project/file.js?dev=false&..`.\n * On UNIX systems, this would look something like `C:\\Users\\..\\project\\file.js?dev=false&..`.\n * This path can safely be used with `path.*` modifiers and resolved.\n */\nexport function createBundleOsPath(options: ExpoMetroOptions): string {\n  const queryParams = createBundleUrlSearchParams(options);\n  const mainModuleName = toPosixPath(options.mainModuleName);\n  return `${mainModuleName}.bundle?${queryParams.toString()}`;\n}\n\nexport function createBundleUrlSearchParams(options: ExpoMetroOptions): URLSearchParams {\n  const {\n    platform,\n    mode,\n    minify,\n    environment,\n    serializerOutput,\n    serializerIncludeMaps,\n    lazy,\n    bytecode,\n    engine,\n    preserveEnvVars,\n    asyncRoutes,\n    baseUrl,\n    routerRoot,\n    reactCompiler,\n    inlineSourceMap,\n    isExporting,\n    clientBoundaries,\n    splitChunks,\n    usedExports,\n    optimize,\n    domRoot,\n    modulesOnly,\n    runModule,\n    liveBindings,\n  } = withDefaults(options);\n\n  const dev = String(mode !== 'production');\n  const queryParams = new URLSearchParams({\n    platform: encodeURIComponent(platform),\n    dev,\n    // TODO: Is this still needed?\n    hot: String(false),\n  });\n\n  // Lazy bundling must be disabled for bundle splitting to work.\n  if (!isExporting && lazy) {\n    queryParams.append('lazy', String(lazy));\n  }\n\n  if (inlineSourceMap) {\n    queryParams.append('inlineSourceMap', String(inlineSourceMap));\n  }\n\n  if (minify) {\n    queryParams.append('minify', String(minify));\n  }\n\n  // We split bytecode from the engine since you could technically use Hermes without bytecode.\n  // Hermes indicates the type of language features you want to transform out of the JS, whereas bytecode\n  // indicates whether you want to use the Hermes bytecode format.\n  if (engine) {\n    queryParams.append('transform.engine', engine);\n  }\n  if (bytecode) {\n    queryParams.append('transform.bytecode', '1');\n  }\n  if (asyncRoutes) {\n    queryParams.append('transform.asyncRoutes', String(asyncRoutes));\n  }\n  if (preserveEnvVars) {\n    queryParams.append('transform.preserveEnvVars', String(preserveEnvVars));\n  }\n  if (baseUrl) {\n    queryParams.append('transform.baseUrl', baseUrl);\n  }\n  if (clientBoundaries?.length) {\n    queryParams.append('transform.clientBoundaries', JSON.stringify(clientBoundaries));\n  }\n  if (routerRoot != null) {\n    queryParams.append('transform.routerRoot', routerRoot);\n  }\n  if (reactCompiler) {\n    queryParams.append('transform.reactCompiler', String(reactCompiler));\n  }\n  if (domRoot) {\n    queryParams.append('transform.dom', domRoot);\n  }\n\n  if (environment) {\n    queryParams.append('resolver.environment', environment);\n    queryParams.append('transform.environment', environment);\n  }\n\n  if (isExporting) {\n    queryParams.append('resolver.exporting', String(isExporting));\n  }\n\n  if (splitChunks) {\n    queryParams.append('serializer.splitChunks', String(splitChunks));\n  }\n  if (usedExports) {\n    queryParams.append('serializer.usedExports', String(usedExports));\n  }\n  if (optimize) {\n    queryParams.append('transform.optimize', String(optimize));\n  }\n  if (serializerOutput) {\n    queryParams.append('serializer.output', serializerOutput);\n  }\n  if (serializerIncludeMaps) {\n    queryParams.append('serializer.map', String(serializerIncludeMaps));\n  }\n  if (engine === 'hermes') {\n    queryParams.append('unstable_transformProfile', 'hermes-stable');\n  }\n\n  if (modulesOnly != null) {\n    queryParams.set('modulesOnly', String(modulesOnly));\n  }\n  if (runModule != null) {\n    queryParams.set('runModule', String(runModule));\n  }\n\n  if (liveBindings === false) {\n    queryParams.append('transform.liveBindings', String(false));\n  }\n\n  return queryParams;\n}\n\n/**\n * Convert all path separators to `/`, including on Windows.\n * Metro asumes that all module specifiers are posix paths.\n * References to directories can still be Windows-style paths in Metro.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#importing_features_into_your_script\n * @see https://github.com/facebook/metro/pull/1286\n */\nexport function convertPathToModuleSpecifier(pathLike: string) {\n  return toPosixPath(pathLike);\n}\n\nexport function getMetroOptionsFromUrl(urlFragment: string) {\n  const url = new URL(urlFragment, 'http://localhost:0');\n  const getStringParam = (key: string) => {\n    const param = url.searchParams.get(key);\n    if (Array.isArray(param)) {\n      throw new Error(`Expected single value for ${key}`);\n    }\n    return param;\n  };\n\n  let pathname = url.pathname;\n  if (pathname.endsWith('.bundle')) {\n    pathname = pathname.slice(0, -'.bundle'.length);\n  }\n\n  const options: ExpoMetroOptions = {\n    mode: isTruthy(getStringParam('dev') ?? 'true') ? 'development' : 'production',\n    minify: isTruthy(getStringParam('minify') ?? 'false'),\n    lazy: isTruthy(getStringParam('lazy') ?? 'false'),\n    routerRoot: getStringParam('transform.routerRoot') ?? 'app',\n    isExporting: isTruthy(getStringParam('resolver.exporting') ?? 'false'),\n    environment: assertEnvironment(getStringParam('transform.environment') ?? 'node'),\n    platform: url.searchParams.get('platform') ?? 'web',\n    bytecode: isTruthy(getStringParam('transform.bytecode') ?? 'false'),\n    mainModuleName: convertPathToModuleSpecifier(pathname),\n    reactCompiler: isTruthy(getStringParam('transform.reactCompiler') ?? 'false'),\n    asyncRoutes: isTruthy(getStringParam('transform.asyncRoutes') ?? 'false'),\n    baseUrl: getStringParam('transform.baseUrl') ?? undefined,\n    // clientBoundaries: JSON.parse(getStringParam('transform.clientBoundaries') ?? '[]'),\n    engine: assertEngine(getStringParam('transform.engine')),\n    runModule: isTruthy(getStringParam('runModule') ?? 'true'),\n    modulesOnly: isTruthy(getStringParam('modulesOnly') ?? 'false'),\n    liveBindings: isTruthy(getStringParam('transform.liveBindings') ?? 'true'),\n  };\n\n  return options;\n}\n\nfunction isTruthy(value: string | null): boolean {\n  return value === 'true' || value === '1';\n}\n\nfunction assertEnvironment(environment: string | undefined): MetroEnvironment | undefined {\n  if (!environment) {\n    return undefined;\n  }\n  if (!['node', 'react-server', 'client'].includes(environment)) {\n    throw new Error(`Expected transform.environment to be one of: node, react-server, client`);\n  }\n  return environment as MetroEnvironment;\n}\nfunction assertEngine(engine: string | undefined | null): 'hermes' | undefined {\n  if (!engine) {\n    return undefined;\n  }\n  if (!['hermes'].includes(engine)) {\n    throw new Error(`Expected transform.engine to be one of: hermes`);\n  }\n  return engine as 'hermes';\n}\n"],"names":["convertPathToModuleSpecifier","createBundleOsPath","createBundleUrlPath","createBundleUrlPathFromExpoConfig","createBundleUrlSearchParams","getAsyncRoutesFromExpoConfig","getBaseUrlFromExpoConfig","getMetroDirectBundleOptions","getMetroDirectBundleOptionsForExpoConfig","getMetroOptionsFromUrl","isServerEnvironment","debug","require","environment","withDefaults","mode","minify","preserveEnvVars","env","EXPO_NO_CLIENT_ENV_VARS","lazy","props","bytecode","platform","CommandError","engine","optimize","EXPO_UNSTABLE_METRO_OPTIMIZE_GRAPH","usedExports","EXPO_UNSTABLE_TREE_SHAKING","isExporting","undefined","liveBindings","EXPO_UNSTABLE_LIVE_BINDINGS","exp","experiments","baseUrl","trim","replace","asyncRoutesSetting","extra","router","asyncRoutes","includes","default","projectRoot","options","reactCompiler","routerRoot","getRouterDirectoryModuleIdWithManifest","mainModuleName","serializerOutput","serializerIncludeMaps","inlineSourceMap","splitChunks","domRoot","clientBoundaries","runModule","modulesOnly","useMd5Filename","dev","isHermes","fakeSourceUrl","fakeSourceMapUrl","URL","toString","customTransformOptions","__proto__","String","dom","key","bundleOptions","entryFile","unstable_transformProfile","customResolverOptions","exporting","sourceMapUrl","sourceUrl","serializerOptions","output","includeSourceMaps","queryParams","encodeURI","toPosixPath","URLSearchParams","encodeURIComponent","hot","append","length","JSON","stringify","set","pathLike","urlFragment","url","getStringParam","param","searchParams","get","Array","isArray","Error","pathname","endsWith","slice","isTruthy","assertEnvironment","assertEngine","value"],"mappings":";;;;;;;;;;;IAkZgBA,4BAA4B;eAA5BA;;IAxIAC,kBAAkB;eAAlBA;;IAXAC,mBAAmB;eAAnBA;;IAbAC,iCAAiC;eAAjCA;;IA8BAC,2BAA2B;eAA3BA;;IAxKAC,4BAA4B;eAA5BA;;IAJAC,wBAAwB;eAAxBA;;IAiCAC,2BAA2B;eAA3BA;;IAdAC,wCAAwC;eAAxCA;;IA+RAC,sBAAsB;eAAtBA;;IAxVAC,mBAAmB;eAAnBA;;;qBA3DI;wBACS;0BACD;wBAC2B;AAEvD,MAAMC,QAAQC,QAAQ,SAAS;AAsDxB,SAASF,oBAAoBG,WAAiB;IACnD,OAAOA,gBAAgB,UAAUA,gBAAgB;AACnD;AAEA,SAASC,aAAa,EACpBC,OAAO,aAAa,EACpBC,SAASD,SAAS,YAAY,EAC9BE,kBAAkBF,SAAS,iBAAiBG,QAAG,CAACC,uBAAuB,EACvEC,IAAI,EACJP,WAAW,EACX,GAAGQ,OACc;IACjB,IAAIA,MAAMC,QAAQ,EAAE;QAClB,IAAID,MAAME,QAAQ,KAAK,OAAO;YAC5B,MAAM,IAAIC,oBAAY,CAAC;QACzB;QACA,IAAIH,MAAMI,MAAM,KAAK,UAAU;YAC7B,MAAM,IAAID,oBAAY,CAAC;QACzB;IACF;IAEA,MAAME,WACJL,MAAMK,QAAQ,IACbb,CAAAA,gBAAgB,UAAUE,SAAS,gBAAgBG,QAAG,CAACS,kCAAkC,AAAD;IAE3F,OAAO;QACLZ;QACAC;QACAC;QACAS;QACAE,aAAaF,YAAYR,QAAG,CAACW,0BAA0B;QACvDT,MAAM,CAACC,MAAMS,WAAW,IAAIV;QAC5BP,aAAaA,gBAAgB,WAAWkB,YAAYlB;QACpDmB,cAAcd,QAAG,CAACe,2BAA2B;QAC7C,GAAGZ,KAAK;IACV;AACF;AAEO,SAASf,yBAAyB4B,GAAe;QAC/CA,0BAAAA;IAAP,OAAOA,EAAAA,mBAAAA,IAAIC,WAAW,sBAAfD,2BAAAA,iBAAiBE,OAAO,qBAAxBF,yBAA0BG,IAAI,GAAGC,OAAO,CAAC,QAAQ,QAAO;AACjE;AAEO,SAASjC,6BAA6B6B,GAAe,EAAEnB,IAAY,EAAEQ,QAAgB;QAGtFW,mBAAAA;IAFJ,IAAIK;IAEJ,KAAIL,aAAAA,IAAIM,KAAK,sBAATN,oBAAAA,WAAWO,MAAM,qBAAjBP,kBAAmBQ,WAAW,EAAE;YACdR,oBAAAA;QAApB,MAAMQ,eAAcR,cAAAA,IAAIM,KAAK,sBAATN,qBAAAA,YAAWO,MAAM,qBAAjBP,mBAAmBQ,WAAW;QAClD,IAAI;YAAC;YAAW;SAAS,CAACC,QAAQ,CAAC,OAAOD,cAAc;YACtDH,qBAAqBG;QACvB,OAAO,IAAI,OAAOA,gBAAgB,UAAU;YAC1CH,qBAAqBG,WAAW,CAACnB,SAAS,IAAImB,YAAYE,OAAO;QACnE;IACF;IAEA,OAAO;QAAC7B;QAAM;KAAK,CAAC4B,QAAQ,CAACJ;AAC/B;AAEO,SAAS/B,yCACdqC,WAAmB,EACnBX,GAAe,EACfY,OAA2F;QAIxEZ;IAFnB,OAAO3B,4BAA4B;QACjC,GAAGuC,OAAO;QACVC,eAAe,CAAC,GAACb,mBAAAA,IAAIC,WAAW,qBAAfD,iBAAiBa,aAAa;QAC/CX,SAAS9B,yBAAyB4B;QAClCc,YAAYC,IAAAA,8CAAsC,EAACJ,aAAaX;QAChEQ,aAAarC,6BAA6B6B,KAAKY,QAAQ/B,IAAI,EAAE+B,QAAQvB,QAAQ;IAC/E;AACF;AAEO,SAAShB,4BACduC,OAAyB;IAEzB,MAAM,EACJI,cAAc,EACd3B,QAAQ,EACRR,IAAI,EACJC,MAAM,EACNH,WAAW,EACXsC,gBAAgB,EAChBC,qBAAqB,EACrB9B,QAAQ,EACRF,IAAI,EACJK,MAAM,EACNR,eAAe,EACfyB,WAAW,EACXN,OAAO,EACPY,UAAU,EACVlB,WAAW,EACXuB,eAAe,EACfC,WAAW,EACX1B,WAAW,EACXmB,aAAa,EACbrB,QAAQ,EACR6B,OAAO,EACPC,gBAAgB,EAChBC,SAAS,EACTC,WAAW,EACXC,cAAc,EACd3B,YAAY,EACb,GAAGlB,aAAagC;IAEjB,MAAMc,MAAM7C,SAAS;IACrB,MAAM8C,WAAWpC,WAAW;IAE5B,IAAIK,aAAa;QACfnB,MAAM;QACNmC,QAAQ1B,IAAI,GAAG;IACjB;IAEA,IAAI0C;IACJ,IAAIC;IAEJ,yEAAyE;IACzE,IAAIX,yBAAyB,QAAQD,oBAAoB,MAAM;QAC7DW,gBAAgB,IAAIE,IAClB9D,oBAAoB4C,SAASR,OAAO,CAAC,OAAO,KAC5C,yBACA2B,QAAQ;QACV,IAAIb,uBAAuB;YACzBW,mBAAmBD,cAAcxB,OAAO,CAAC,YAAY;QACvD;IACF;IAEA,MAAM4B,yBAA2E;QAC/EC,WAAW;QACXzC,UAAUA,YAAYK;QACtBN;QACA+B;QACAvC,iBAAiBA,mBAAmBc;QACpC,gDAAgD;QAChDW,aAAaA,cAAc0B,OAAO1B,eAAeX;QACjDlB;QACAuB,SAASA,WAAWL;QACpBiB;QACA1B,UAAUA,WAAW,MAAMS;QAC3BgB,eAAeA,gBAAgBqB,OAAOrB,iBAAiBhB;QACvDsC,KAAKd;QACLI,gBAAgBA,kBAAkB5B;QAClCC,cAAc,CAACA,eAAeoC,OAAOpC,gBAAgBD;IACvD;IAEA,sCAAsC;IACtC,IAAK,MAAMuC,OAAOJ,uBAAwB;QACxC,IAAIA,sBAAsB,CAACI,IAAI,KAAKvC,WAAW;YAC7C,OAAOmC,sBAAsB,CAACI,IAAI;QACpC;IACF;IAEA,MAAMC,gBAAiD;QACrDhD;QACAiD,WAAWtB;QACXU;QACA5C,QAAQA,UAAU,CAAC4C;QACnBP,iBAAiBA,mBAAmB;QACpCjC,MAAM,AAAC,CAACU,eAAeV,QAASW;QAChC0C,2BAA2BZ,WAAW,kBAAkB;QACxDK;QACAT;QACAC;QACAgB,uBAAuB;YACrBP,WAAW;YACXtD;YACA8D,WAAW7C,eAAeC;QAC5B;QACA6C,cAAcb;QACdc,WAAWf;QACXgB,mBAAmB;YACjBxB;YACA1B,aAAaA,eAAeG;YAC5BgD,QAAQ5B;YACR6B,mBAAmB5B;YACnBuB,WAAW7C,eAAeC;QAC5B;IACF;IAEA,OAAOwC;AACT;AAEO,SAASpE,kCACd0C,WAAmB,EACnBX,GAAe,EACfY,OAA2E;QAIxDZ;IAFnB,OAAOhC,oBAAoB;QACzB,GAAG4C,OAAO;QACVC,eAAe,CAAC,GAACb,mBAAAA,IAAIC,WAAW,qBAAfD,iBAAiBa,aAAa;QAC/CX,SAAS9B,yBAAyB4B;QAClCc,YAAYC,IAAAA,8CAAsC,EAACJ,aAAaX;IAClE;AACF;AAEO,SAAShC,oBAAoB4C,OAAyB;IAC3D,MAAMmC,cAAc7E,4BAA4B0C;IAChD,OAAO,CAAC,CAAC,EAAEoC,UAAUpC,QAAQI,cAAc,CAACZ,OAAO,CAAC,QAAQ,KAAK,QAAQ,EAAE2C,YAAYhB,QAAQ,IAAI;AACrG;AAQO,SAAShE,mBAAmB6C,OAAyB;IAC1D,MAAMmC,cAAc7E,4BAA4B0C;IAChD,MAAMI,iBAAiBiC,IAAAA,qBAAW,EAACrC,QAAQI,cAAc;IACzD,OAAO,GAAGA,eAAe,QAAQ,EAAE+B,YAAYhB,QAAQ,IAAI;AAC7D;AAEO,SAAS7D,4BAA4B0C,OAAyB;IACnE,MAAM,EACJvB,QAAQ,EACRR,IAAI,EACJC,MAAM,EACNH,WAAW,EACXsC,gBAAgB,EAChBC,qBAAqB,EACrBhC,IAAI,EACJE,QAAQ,EACRG,MAAM,EACNR,eAAe,EACfyB,WAAW,EACXN,OAAO,EACPY,UAAU,EACVD,aAAa,EACbM,eAAe,EACfvB,WAAW,EACX0B,gBAAgB,EAChBF,WAAW,EACX1B,WAAW,EACXF,QAAQ,EACR6B,OAAO,EACPG,WAAW,EACXD,SAAS,EACTzB,YAAY,EACb,GAAGlB,aAAagC;IAEjB,MAAMc,MAAMQ,OAAOrD,SAAS;IAC5B,MAAMkE,cAAc,IAAIG,gBAAgB;QACtC7D,UAAU8D,mBAAmB9D;QAC7BqC;QACA,8BAA8B;QAC9B0B,KAAKlB,OAAO;IACd;IAEA,+DAA+D;IAC/D,IAAI,CAACtC,eAAeV,MAAM;QACxB6D,YAAYM,MAAM,CAAC,QAAQnB,OAAOhD;IACpC;IAEA,IAAIiC,iBAAiB;QACnB4B,YAAYM,MAAM,CAAC,mBAAmBnB,OAAOf;IAC/C;IAEA,IAAIrC,QAAQ;QACViE,YAAYM,MAAM,CAAC,UAAUnB,OAAOpD;IACtC;IAEA,6FAA6F;IAC7F,uGAAuG;IACvG,gEAAgE;IAChE,IAAIS,QAAQ;QACVwD,YAAYM,MAAM,CAAC,oBAAoB9D;IACzC;IACA,IAAIH,UAAU;QACZ2D,YAAYM,MAAM,CAAC,sBAAsB;IAC3C;IACA,IAAI7C,aAAa;QACfuC,YAAYM,MAAM,CAAC,yBAAyBnB,OAAO1B;IACrD;IACA,IAAIzB,iBAAiB;QACnBgE,YAAYM,MAAM,CAAC,6BAA6BnB,OAAOnD;IACzD;IACA,IAAImB,SAAS;QACX6C,YAAYM,MAAM,CAAC,qBAAqBnD;IAC1C;IACA,IAAIoB,oCAAAA,iBAAkBgC,MAAM,EAAE;QAC5BP,YAAYM,MAAM,CAAC,8BAA8BE,KAAKC,SAAS,CAAClC;IAClE;IACA,IAAIR,cAAc,MAAM;QACtBiC,YAAYM,MAAM,CAAC,wBAAwBvC;IAC7C;IACA,IAAID,eAAe;QACjBkC,YAAYM,MAAM,CAAC,2BAA2BnB,OAAOrB;IACvD;IACA,IAAIQ,SAAS;QACX0B,YAAYM,MAAM,CAAC,iBAAiBhC;IACtC;IAEA,IAAI1C,aAAa;QACfoE,YAAYM,MAAM,CAAC,wBAAwB1E;QAC3CoE,YAAYM,MAAM,CAAC,yBAAyB1E;IAC9C;IAEA,IAAIiB,aAAa;QACfmD,YAAYM,MAAM,CAAC,sBAAsBnB,OAAOtC;IAClD;IAEA,IAAIwB,aAAa;QACf2B,YAAYM,MAAM,CAAC,0BAA0BnB,OAAOd;IACtD;IACA,IAAI1B,aAAa;QACfqD,YAAYM,MAAM,CAAC,0BAA0BnB,OAAOxC;IACtD;IACA,IAAIF,UAAU;QACZuD,YAAYM,MAAM,CAAC,sBAAsBnB,OAAO1C;IAClD;IACA,IAAIyB,kBAAkB;QACpB8B,YAAYM,MAAM,CAAC,qBAAqBpC;IAC1C;IACA,IAAIC,uBAAuB;QACzB6B,YAAYM,MAAM,CAAC,kBAAkBnB,OAAOhB;IAC9C;IACA,IAAI3B,WAAW,UAAU;QACvBwD,YAAYM,MAAM,CAAC,6BAA6B;IAClD;IAEA,IAAI7B,eAAe,MAAM;QACvBuB,YAAYU,GAAG,CAAC,eAAevB,OAAOV;IACxC;IACA,IAAID,aAAa,MAAM;QACrBwB,YAAYU,GAAG,CAAC,aAAavB,OAAOX;IACtC;IAEA,IAAIzB,iBAAiB,OAAO;QAC1BiD,YAAYM,MAAM,CAAC,0BAA0BnB,OAAO;IACtD;IAEA,OAAOa;AACT;AAUO,SAASjF,6BAA6B4F,QAAgB;IAC3D,OAAOT,IAAAA,qBAAW,EAACS;AACrB;AAEO,SAASnF,uBAAuBoF,WAAmB;IACxD,MAAMC,MAAM,IAAI9B,IAAI6B,aAAa;IACjC,MAAME,iBAAiB,CAACzB;QACtB,MAAM0B,QAAQF,IAAIG,YAAY,CAACC,GAAG,CAAC5B;QACnC,IAAI6B,MAAMC,OAAO,CAACJ,QAAQ;YACxB,MAAM,IAAIK,MAAM,CAAC,0BAA0B,EAAE/B,KAAK;QACpD;QACA,OAAO0B;IACT;IAEA,IAAIM,WAAWR,IAAIQ,QAAQ;IAC3B,IAAIA,SAASC,QAAQ,CAAC,YAAY;QAChCD,WAAWA,SAASE,KAAK,CAAC,GAAG,CAAC,UAAUhB,MAAM;IAChD;IAEA,MAAM1C,UAA4B;QAChC/B,MAAM0F,SAASV,eAAe,UAAU,UAAU,gBAAgB;QAClE/E,QAAQyF,SAASV,eAAe,aAAa;QAC7C3E,MAAMqF,SAASV,eAAe,WAAW;QACzC/C,YAAY+C,eAAe,2BAA2B;QACtDjE,aAAa2E,SAASV,eAAe,yBAAyB;QAC9DlF,aAAa6F,kBAAkBX,eAAe,4BAA4B;QAC1ExE,UAAUuE,IAAIG,YAAY,CAACC,GAAG,CAAC,eAAe;QAC9C5E,UAAUmF,SAASV,eAAe,yBAAyB;QAC3D7C,gBAAgBlD,6BAA6BsG;QAC7CvD,eAAe0D,SAASV,eAAe,8BAA8B;QACrErD,aAAa+D,SAASV,eAAe,4BAA4B;QACjE3D,SAAS2D,eAAe,wBAAwBhE;QAChD,sFAAsF;QACtFN,QAAQkF,aAAaZ,eAAe;QACpCtC,WAAWgD,SAASV,eAAe,gBAAgB;QACnDrC,aAAa+C,SAASV,eAAe,kBAAkB;QACvD/D,cAAcyE,SAASV,eAAe,6BAA6B;IACrE;IAEA,OAAOjD;AACT;AAEA,SAAS2D,SAASG,KAAoB;IACpC,OAAOA,UAAU,UAAUA,UAAU;AACvC;AAEA,SAASF,kBAAkB7F,WAA+B;IACxD,IAAI,CAACA,aAAa;QAChB,OAAOkB;IACT;IACA,IAAI,CAAC;QAAC;QAAQ;QAAgB;KAAS,CAACY,QAAQ,CAAC9B,cAAc;QAC7D,MAAM,IAAIwF,MAAM,CAAC,uEAAuE,CAAC;IAC3F;IACA,OAAOxF;AACT;AACA,SAAS8F,aAAalF,MAAiC;IACrD,IAAI,CAACA,QAAQ;QACX,OAAOM;IACT;IACA,IAAI,CAAC;QAAC;KAAS,CAACY,QAAQ,CAAClB,SAAS;QAChC,MAAM,IAAI4E,MAAM,CAAC,8CAA8C,CAAC;IAClE;IACA,OAAO5E;AACT"}